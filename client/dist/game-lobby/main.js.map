{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/lobby/lobby.component.css","webpack:///./src/app/lobby/lobby.component.html","webpack:///./src/app/lobby/lobby.component.ts","webpack:///./src/app/login-dialog/login-dialog.component.css","webpack:///./src/app/login-dialog/login-dialog.component.html","webpack:///./src/app/login-dialog/login-dialog.component.ts","webpack:///./src/app/player-dialog/player-dialog.component.css","webpack:///./src/app/player-dialog/player-dialog.component.html","webpack:///./src/app/player-dialog/player-dialog.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LobbyComponent } from './lobby/lobby.component';\n\nconst routes: Routes = [\n  { path: '', component: LobbyComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Game Lobby';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatButtonModule, MatCheckboxModule, MatTableModule, \n  MatToolbarModule, MatDialogModule, MatFormFieldModule, MatInputModule, \n  MatListModule, MatDividerModule, MatSelectModule, MatSnackBarModule } from '@angular/material';\n\nimport { LobbyComponent } from './lobby/lobby.component';\nimport { LoginDialogComponent } from './login-dialog/login-dialog.component';\nimport { PlayerDialogComponent } from './player-dialog/player-dialog.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LobbyComponent,\n    LoginDialogComponent,\n    PlayerDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    \n    BrowserAnimationsModule,\n    MatTableModule,\n    MatToolbarModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatCheckboxModule,\n    MatInputModule,\n    MatListModule,\n    MatDividerModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    LoginDialogComponent,\n    PlayerDialogComponent\n  ]\n})\nexport class AppModule { }\n","module.exports = \"table {\\n    width: 100%;\\n} \\n\\n.fill-remaining-space {\\n    flex: 1 1 auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9iYnkvbG9iYnkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7Q0FDZjs7QUFFRDtJQUNJLGVBQWU7Q0FDbEIiLCJmaWxlIjoic3JjL2FwcC9sb2JieS9sb2JieS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xufSBcblxuLmZpbGwtcmVtYWluaW5nLXNwYWNlIHtcbiAgICBmbGV4OiAxIDEgYXV0bztcbn0iXX0= */\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n    <span>Game Lobby</span>\\n    <span class=\\\"fill-remaining-space\\\"></span>\\n    <button mat-button (click)=\\\"onAddPlayerClick()\\\">Add Player</button>\\n    <button (click)=\\\"onPlayersClick()\\\" mat-button>Players</button>\\n    <button (click)=\\\"onGamesClick()\\\" mat-button>Games</button>\\n    <button (click)=\\\"onLoginClick()\\\" mat-button *ngIf=\\\"!isAdmin()\\\">Login</button>\\n    <button (click)=\\\"onLogoutClick()\\\" mat-button *ngIf=\\\"isAdmin()\\\">Logout</button>\\n</mat-toolbar>\\n\\n<table *ngIf=\\\"getTab() == LobbyTab.PLAYERS\\\" mat-table [dataSource]=\\\"playerTableData\\\" class=\\\"mat-elevation-z8\\\">\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Player </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.name }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"rank\\\">\\n    <th mat-header-cell *matHeaderCellDef> Rank </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.rank }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"score\\\">\\n    <th mat-header-cell *matHeaderCellDef> Score </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.score }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"time\\\">\\n  <th mat-header-cell *matHeaderCellDef> Time </th>\\n  <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.time }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"gamePlayed\\\">\\n    <th mat-header-cell *matHeaderCellDef> Game Played </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.gamePlayed }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"status\\\">\\n    <th mat-header-cell *matHeaderCellDef> Status </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.status }} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"option\\\">\\n    <th mat-header-cell *matHeaderCellDef></th>\\n    <td mat-cell *matCellDef=\\\"let element; let i = index;\\\">\\n      <button (click)=\\\"onJoinLobbyClick(i)\\\" mat-button *ngIf=\\\"element.option && !isAdmin()\\\">Join Game</button>\\n\\n      <button (click)=\\\"onEditPlayerClick(i)\\\" mat-button *ngIf=\\\"isAdmin()\\\">Update</button>\\n      <button (click)=\\\"onDeletePlayerClick(i)\\\" mat-button *ngIf=\\\"isAdmin()\\\">Delete</button>\\n\\n    </td>\\n\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"playerTableColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: playerTableColumns;\\\"></tr>\\n</table>\\n\\n<table *ngIf=\\\"getTab() == LobbyTab.GAMES\\\" mat-table [dataSource]=\\\"gameTableData\\\" class=\\\"mat-elevation-z8\\\">\\n    <ng-container matColumnDef=\\\"title\\\">\\n      <th mat-header-cell *matHeaderCellDef> Title </th>\\n      <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.title }} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"platform\\\">\\n      <th mat-header-cell *matHeaderCellDef> Platform </th>\\n      <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.platform }} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"genre\\\">\\n      <th mat-header-cell *matHeaderCellDef> Genre </th>\\n      <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.genre }} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"publisher\\\">\\n    <th mat-header-cell *matHeaderCellDef> Publisher </th>\\n    <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.publisher }} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"release\\\">\\n      <th mat-header-cell *matHeaderCellDef> Release </th>\\n      <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.release }} </td>\\n    </ng-container>\\n  \\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef> Status </th>\\n      <td mat-cell *matCellDef=\\\"let element;\\\"> {{ element.status }} </td>\\n    </ng-container>\\n  \\n    <tr mat-header-row *matHeaderRowDef=\\\"gameTableColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: gameTableColumns;\\\"></tr>\\n  </table>\\n\\n<router-outlet></router-outlet>\"","import { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatTable, MatSnackBar } from '@angular/material';\nimport { LoginDialogComponent } from '../login-dialog/login-dialog.component';\nimport { PlayerDialogComponent, PlayerDialogState } from '../player-dialog/player-dialog.component';\n\nexport interface Player {\n  name: string;\n  rank: Number;\n  score: Number;\n  time: string;\n  gamePlayed: string;\n  status: string;\n  option: string;\n}\n\nexport interface Game {\n  title: string;\n  platform: string;\n  genre: string;\n  publisher: string;\n  release: Number;\n  status: string;\n}\n\nexport enum LobbyTab {\n  PLAYERS = \"PLAYERS\",\n  GAMES = \"GAMES\"\n}\n\nconst LOBBY_DATA: Player[] = [\n  { name: \"faker\", rank: 1, score: 100000, time: \"5h\", gamePlayed: \"League\", status: \"Busy\", option: \"\" },\n  { name: \"shroud\", rank: 2, score: 333, time: \"10h\", gamePlayed: \"CS GO\", status: \"Available\", option: \"Join Game\" },\n  { name: \"oddone\", rank: 3, score: 7777, time: \"3d\", gamePlayed: \"Overwatch\", status: \"Available\", option: \"Join Game\" }\n];\n\nconst GAME_DATA: Game[] = [\n  { title: \"Diablo 3\", platform: \"PC\", genre: \"RPG\", publisher: \"Blizzard\", release: 2015, status: \"Active\" },\n  { title: \"Call Of Duty\", platform: \"Xbox\", genre: \"FPS\", publisher: \"Activision\", release: 2013, status: \"Active\" },\n  { title: \"League of Legends\", platform: \"PC\", genre: \"MOBA\", publisher: \"Riot\", release: 2011, status: \"Active\" }\n];\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.css']\n})\nexport class LobbyComponent implements OnInit {\n\n  @ViewChild(MatTable) table: MatTable<Player[]>;\n\n  tab: LobbyTab;\n  playerTableData: Player[] = LOBBY_DATA;\n  playerTableColumns: string[] = [\"name\", \"rank\", \"score\", \"time\", \"gamePlayed\", \"status\", \"option\"];\n\n  gameTableData: Game[] = GAME_DATA;\n  gameTableColumns: string[] = [\"title\", \"platform\", \"genre\", \"publisher\", \"release\", \"status\"];\n\n  private admin: boolean;\n\n  LobbyTab = LobbyTab;\n\n  constructor(public dialog: MatDialog, public snackBar: MatSnackBar) { \n    \n    this.admin = false;\n    this.tab = LobbyTab.PLAYERS;\n  }\n\n  getTab() {\n    return this.tab;\n  }\n\n  onGamesClick() {\n    this.tab = LobbyTab.GAMES;\n  }\n\n  onPlayersClick() {\n    this.tab = LobbyTab.PLAYERS;\n  }\n\n  isAdmin(): boolean {\n    return this.admin;\n  }\n\n  onLogoutClick(): void {\n    this.admin = false;\n  }\n\n  onLoginClick(): void {\n    this.openLoginDialog();\n  }\n\n  openLoginDialog(): void {\n    const dialogRef = this.dialog.open(LoginDialogComponent, {\n      width: \"60%\"\n    }).afterClosed().subscribe((loggedIn: boolean) => {\n      if(loggedIn) {\n        this.admin = true;\n      }\n    });\n  }\n\n  onJoinLobbyClick(index: number): void {\n    const dialogRef = this.dialog.open(PlayerDialogComponent, {\n      width: \"70%\",\n      data: [PlayerDialogState.SHOW, this.playerTableData[index]],\n      autoFocus: false\n    })\n  }\n\n  onAddPlayerClick(index: number): void {\n    const dialogRef = this.dialog.open(PlayerDialogComponent, {\n      width: \"70%\",\n      data: [PlayerDialogState.ADD, this.playerTableData[index]],\n      autoFocus: false\n    }).afterClosed().subscribe((player: Player) => {\n      console.log(player);\n      if(player) {\n        this.playerTableData.push(player);\n        this.table.renderRows();\n      }\n    });\n  }\n\n  onDeletePlayerClick(index: number): void {\n    this.playerTableData.splice(index, 1);\n    this.snackBar.open(\"Succesfully deleted player\", \"OK\");\n    this.table.renderRows();\n    \n  }\n\n  onEditPlayerClick(index: number): void {\n    const dialogRef = this.dialog.open(PlayerDialogComponent, {\n      width: \"70%\",\n      data: [PlayerDialogState.EDIT, this.playerTableData[index]],\n      autoFocus: false\n    }).afterClosed().subscribe((player: Player) => {\n      if(player) {\n        this.playerTableData[index] = player;\n        this.table.renderRows();\n      }\n    });\n  }\n\n  ngOnInit() { }\n}","module.exports = \".container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n  \\n.container > * {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4tZGlhbG9nL2xvZ2luLWRpYWxvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLHVCQUF1QjtDQUN4Qjs7QUFFRDtFQUNFLFlBQVk7Q0FDYiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luLWRpYWxvZy9sb2dpbi1kaWFsb2cuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuICBcbi5jb250YWluZXIgPiAqIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"","module.exports = \"<h2 mat-dialog-title>Admin Login</h2>\\n<mat-dialog-content>\\n  <div [formGroup]=\\\"loginForm\\\" class=\\\"container\\\">\\n    <mat-form-field>\\n      <input formControlName=\\\"username\\\" matInput placeholder=\\\"Username\\\">\\n      <mat-error *ngIf=\\\"username.invalid && (username.dirty || username.touched)\\\">Invalid username</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input [type]=\\\"hide ? 'password' : 'text'\\\" matInput=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\">\\n      <mat-error *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">Invalid password</mat-error>\\n    </mat-form-field>\\n    \\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-button mat-dialog-close>Close</button>\\n  <button mat-button (click)=\\\"onLoginClick()\\\">Login</button>\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login-dialog',\n  templateUrl: './login-dialog.component.html',\n  styleUrls: ['./login-dialog.component.css']\n})\nexport class LoginDialogComponent implements OnInit {\n  loginForm: FormGroup;\n  hidePassword: boolean;\n\n  get username() {\n    return this.loginForm.get('username');\n  }\n\n  get password() {\n    return this.loginForm.get('password');\n  }\n\n  get hide() {\n    return this.hidePassword;\n  }\n\n  constructor(public dialogRef:  MatDialogRef<LoginDialogComponent>) { \n    this.dialogRef.disableClose = true;\n    this.hidePassword = true;\n\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [\n        Validators.required\n      ]),\n      password: new FormControl('', [\n        Validators.required\n      ])\n    });\n  }\n\n  setFormTouched(formGroup: FormGroup): void {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.setFormTouched(control);\n      }\n    });\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  onLoginClick() {\n    if(this.loginForm.invalid) {\n      this.setFormTouched(this.loginForm);\n    } else {\n      this.dialogRef.close(true);\n    }\n  }\n\n  ngOnInit() { }\n}\n","module.exports = \".container {\\n    display: flex;\\n    flex-direction: column;\\n}\\n  \\n.container > * {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGxheWVyLWRpYWxvZy9wbGF5ZXItZGlhbG9nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsdUJBQXVCO0NBQzFCOztBQUVEO0lBQ0ksWUFBWTtDQUNmIiwiZmlsZSI6InNyYy9hcHAvcGxheWVyLWRpYWxvZy9wbGF5ZXItZGlhbG9nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG4gIFxuLmNvbnRhaW5lciA+ICoge1xuICAgIHdpZHRoOiAxMDAlO1xufSJdfQ== */\"","module.exports = \"<h2 mat-dialog-title>Player</h2>\\n<mat-dialog-content>\\n\\n  <!-- Show Player Dialog -->\\n  <div *ngIf=\\\"getMode() == PlayerDialogState.SHOW\\\" class=\\\"container\\\" id=\\\"show_player_dialog\\\">\\n    <mat-list>\\n      <mat-list-item>\\n        Player: {{ getPlayer().name }}\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <mat-divider></mat-divider>\\n\\n    <mat-list>\\n      <mat-list-item>Rank: {{ getPlayer().rank }}</mat-list-item>\\n    </mat-list>\\n\\n    <mat-divider></mat-divider>\\n\\n    <mat-list>\\n        <mat-list-item>Score: {{ getPlayer().score }}</mat-list-item>\\n      </mat-list>\\n  \\n    <mat-divider></mat-divider>\\n\\n    <mat-list>\\n        <mat-list-item>Time: {{ getPlayer().time }}</mat-list-item>\\n    </mat-list>\\n  \\n    <mat-divider></mat-divider>\\n\\n    <mat-list>\\n      <mat-list-item>Favourite Game: {{ getPlayer().gamePlayed }}</mat-list-item>\\n    </mat-list>\\n\\n    <mat-list>\\n      <mat-list-item>\\n        <mat-form-field>\\n          <mat-select placeholder=\\\"Select a Game\\\">\\n            <mat-option *ngFor=\\\"let game of getGames()\\\" [value]=\\\"game\\\">\\n              {{ game }}\\n            </mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <mat-divider></mat-divider>\\n  </div>\\n\\n  <!-- Edit Player Dialog -->\\n  <div [formGroup]=\\\"playerForm\\\" *ngIf=\\\"getMode() == PlayerDialogState.EDIT\\\" class=\\\"container\\\" id=\\\"edit_player_dialog\\\">\\n      <mat-form-field>\\n        <input formControlName=\\\"name\\\" matInput placeholder=\\\"Player\\\" value=\\\"{{ getPlayer().name }}\\\">\\n        <mat-error *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n      \\n      <mat-form-field>\\n        <mat-select formControlName=\\\"rank\\\" [(value)]=\\\"getPlayer().rank\\\" placeholder=\\\"Select A Rating\\\">\\n          <mat-option *ngFor=\\\"let rank of getRanks()\\\" [value]=\\\"rank\\\">\\n            {{ rank }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"rank.invalid && (rank.dirty || rank.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n  \\n      <mat-form-field>\\n        <input formControlName=\\\"score\\\" matInput placeholder=\\\"Score\\\" value=\\\"{{ getPlayer().score }}\\\">\\n        <mat-error *ngIf=\\\"score.invalid && (score.dirty || score.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n  \\n      <mat-form-field>\\n        <input formControlName=\\\"time\\\" matInput placeholder=\\\"Time\\\" value=\\\"{{ getPlayer().time }}\\\">\\n        <mat-error *ngIf=\\\"time.invalid && (time.dirty || time.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n  \\n      <mat-form-field>\\n        <mat-select formControlName=\\\"gamePlayed\\\" [(value)]=\\\"getPlayer().gamePlayed\\\" placeholder=\\\"Select A Game\\\">\\n          <mat-option *ngFor=\\\"let game of getGames()\\\" [value]=\\\"game\\\">\\n            {{ game }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"gamePlayed.invalid && (gamePlayed.dirty || gamePlayed.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n  \\n      <mat-form-field>\\n        <mat-select formControlName=\\\"status\\\" [(value)]=\\\"getPlayer().status\\\" placeholder=\\\"Select A Status\\\">\\n          <mat-option *ngFor=\\\"let status of getStatuses()\\\" [value]=\\\"status\\\">\\n            {{ status }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"status.invalid && (status.dirty || status.touched)\\\">Invalid player name</mat-error>\\n      </mat-form-field>\\n  </div>\\n\\n    <!-- Add Player Dialog -->\\n  <div [formGroup]=\\\"playerForm\\\" *ngIf=\\\"getMode() == PlayerDialogState.ADD\\\" class=\\\"container\\\" id=\\\"add_player_dialog\\\">\\n    <mat-form-field>\\n      <input formControlName=\\\"name\\\" matInput placeholder=\\\"Player\\\">\\n      <mat-error *ngIf=\\\"name.invalid\\\">Invalid player name</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <mat-select formControlName=\\\"rank\\\" placeholder=\\\"Select A Rating\\\">\\n        <mat-option *ngFor=\\\"let rank of getRanks()\\\" [value]=\\\"rank\\\">\\n          {{ rank }}\\n        </mat-option>\\n      </mat-select>\\n      <mat-error *ngIf=\\\"rank.invalid\\\">Invalid rank</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input formControlName=\\\"score\\\" matInput placeholder=\\\"Score\\\">\\n      <mat-error *ngIf=\\\"score.invalid\\\">Invalid score</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input formControlName=\\\"time\\\" matInput placeholder=\\\"Time\\\">\\n      <mat-error *ngIf=\\\"time.invalid\\\">Invalid time</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <mat-select formControlName=\\\"gamePlayed\\\" placeholder=\\\"Select A Game\\\">\\n        <mat-option *ngFor=\\\"let game of getGames()\\\" [value]=\\\"game\\\">\\n          {{ game }}\\n        </mat-option>\\n      </mat-select>\\n      <mat-error *ngIf=\\\"gamePlayed.invalid\\\">Invalid game</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <mat-select formControlName=\\\"status\\\" placeholder=\\\"Select A Status\\\">\\n        <mat-option *ngFor=\\\"let status of getStatuses()\\\" [value]=\\\"status\\\">\\n          {{ status }}\\n        </mat-option>\\n      </mat-select>\\n      <mat-error *ngIf=\\\"status.invalid\\\">Invalid status</mat-error>\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button (click)=\\\"onCloseClick()\\\" mat-button>Cancel</button>\\n  <button (click)=\\\"onJoinClick()\\\" *ngIf=\\\"getMode() == PlayerDialogState.SHOW\\\" mat-button=\\\"true\\\">Join</button>\\n  <button (click)=\\\"onAddClick()\\\" *ngIf=\\\"getMode() == PlayerDialogState.ADD\\\" mat-button=\\\"true\\\">Add</button>\\n  <button (click)=\\\"onUpdateClick()\\\" *ngIf=\\\"getMode() == PlayerDialogState.EDIT\\\" mat-button=\\\"true\\\">Update</button>\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSnackBar } from '@angular/material';\nimport { Player } from '../lobby/lobby.component';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nconst OPTIONS: string[] = [\"Option 1\", \"Option 2\", \"Option 3\"];\n\nexport enum PlayerDialogState {\n  ADD = \"ADD\",\n  EDIT = \"EDIT\",\n  SHOW = \"SHOW\"\n}\n\n@Component({\n  selector: 'app-player-dialog',\n  templateUrl: './player-dialog.component.html',\n  styleUrls: ['./player-dialog.component.css']\n})\nexport class PlayerDialogComponent implements OnInit {\n\n  options: string[] = OPTIONS;\n  playerData: Player;\n  mode: string;\n\n  playerForm: FormGroup;\n\n  ngOnInit() {\n  }\n  \n  get name() {\n    return this.playerForm.get('name');\n  }\n\n  get rank() {\n    return this.playerForm.get('rank');\n  }\n\n  get time() {\n    return this.playerForm.get('time');\n  }\n\n  get score() {\n    return this.playerForm.get('score');\n  }\n\n  get gamePlayed() {\n    return this.playerForm.get('gamePlayed');\n  }\n\n  get status() {\n    return this.playerForm.get('status');\n  }\n\n  PlayerDialogState = PlayerDialogState;\n\n  constructor(public dialogRef: MatDialogRef<PlayerDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: [PlayerDialogState, Player],\n    public snackBar: MatSnackBar) {\n      dialogRef.disableClose = true;\n\n      this.mode = data[0];\n      this.playerData = data[1];\n      \n      // if(this.playerData) {\n      this.playerForm = new FormGroup({\n        name: new FormControl(this.playerData ? this.playerData.name : '', [\n          Validators.required\n        ]),\n        rank: new FormControl(this.playerData ? this.playerData.rank : '', [\n          Validators.required\n        ]),\n        score: new FormControl(this.playerData ? this.playerData.score: '', [\n          Validators.required\n        ]),\n        time: new FormControl(this.playerData ? this.playerData.time : '', [\n          Validators.required\n        ]),\n        gamePlayed: new FormControl(this.playerData ? this.playerData.gamePlayed : '', [\n          Validators.required\n        ]),\n        status: new FormControl(this.playerData ? this.playerData.status : '', [\n          Validators.required\n        ])\n      });\n    }\n  \n  setFormTouched(formGroup: FormGroup): void {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.setFormTouched(control);\n      }\n    });\n  }\n\n  onAddClick(): void {\n    if(this.playerForm.invalid) {\n      this.setFormTouched(this.playerForm);\n      this.snackBar.open(\"Please check for errors.\", \"CLOSE\");\n    } else {\n      this.dialogRef.close(this.playerForm.value);\n      this.snackBar.open(\"Successfully added player!\", \"OK\");\n    }\n  }\n\n  onUpdateClick(): void {\n    if(this.playerForm.invalid) {\n      this.setFormTouched(this.playerForm);\n      this.snackBar.open(\"Please check for errors\", \"CLOSE\");\n    } else {\n      this.dialogRef.close(this.playerForm.value);\n      this.snackBar.open(\"Successfully updated player!\", \"OK\");\n    }\n  }\n\n  onJoinClick(): void {\n    console.log(this.playerForm.value);\n  }\n  \n  getMode(): string {\n    return this.mode;\n  }\n\n  getRanks() {\n    return [1, 2, 3, 4, 5];\n  }\n\n  getGames() {\n    return [\"League\", \"CS GO\", \"Overwatch\"];\n  }\n\n  getStatuses() {\n    return [\"Available\", \"Busy\"];\n  }\n\n  getPlayer(): Player {\n    return this.playerData;\n  }\n\n  onCloseClick(): void {\n    this.dialogRef.close();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}